"""
Django settings for fco_project project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5@+v!256@k1!@7$)03^=v$+x@*+x@*+x@*+x@*+x@*+x@*+x@*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # Add this for token authentication
    'drf_spectacular',
    'authentication',
    'owners',
    'ships',
    'fish',
    'catches',
    'regions',
    'admin_module',  # Add the new admin module
    'blockchain',  # Add the blockchain module
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fco_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fco_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'id'  # Changed to Indonesian

TIME_ZONE = 'Asia/Jakarta'  # Changed to Jakarta timezone

USE_I18N = True

USE_TZ = True

# Add locale paths for translations
import os
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'owners.CustomUser'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Explicit encoding settings
DEFAULT_CHARSET = 'utf-8'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'owners.authentication.ShipNumberOrUsernameBackend',
    'django.contrib.auth.backends.ModelBackend',  # Default backend as fallback
]

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'FCO Fish Catch Management API',
    'DESCRIPTION': '''API Django REST untuk mengelola laporan tangkapan ikan dari pemilik kapal.

Sistem ini menyediakan endpoint untuk manajemen lengkap data penangkapan ikan, kapal, pemilik, dan spesies.

Semua endpoint API memerlukan otentikasi kecuali untuk endpoint pendaftaran dan login.

Cara Penggunaan:
1. Daftar akun baru melalui endpoint registrasi
2. Login untuk mendapatkan token otentikasi
3. Gunakan token dalam header Authorization: Token <token_anda>
4. Akses endpoint sesuai dengan peran dan hak akses Anda

Endpoint penting:
- POST /api/auth/register/ - Pendaftaran pengguna baru
- POST /api/auth/login/ - Login pengguna
- POST /api/auth/refresh/ - Refresh token otentikasi
- GET /api/ships/check/ - Memeriksa registrasi kapal
- GET /api/ships/ai-recommendations/ - Mendapatkan rekomendasi kapal dengan penangkapan ikan terbaik berdasarkan AI
''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'LANGUAGES': [
        ('id', 'Indonesian'),
        ('en', 'English'),
    ],
    'SCHEMA_PATH_PREFIX': '/api/',
    'TAGS': [
        {
            'name': 'Authentication', 
            'description': 'Endpoint untuk otentikasi pengguna (login, registrasi, refresh token)'
        },
        {
            'name': 'Admin', 
            'description': 'Endpoint untuk manajemen sistem administrasi (peran, hak akses, menu)'
        },
        {
            'name': 'Owners', 
            'description': 'Endpoint untuk manajemen pemilik kapal (perorangan atau perusahaan)'
        },
        {
            'name': 'Captains', 
            'description': 'Endpoint untuk manajemen nahkoda (informasi lisensi dan pengalaman)'
        },
        {
            'name': 'Ships', 
            'description': '''Endpoint untuk manajemen kapal (registrasi, spesifikasi, laporan tangkapan)

Termasuk fitur AI untuk rekomendasi kapal dengan penangkapan ikan terbaik berdasarkan data historis'''
        },
        {
            'name': 'Fish Species', 
            'description': 'Endpoint untuk manajemen spesies ikan (katalog dan informasi detail)'
        },
        {
            'name': 'Fish Catches', 
            'description': 'Endpoint untuk manajemen laporan tangkapan ikan (pelaporan dan detail)'
        },
        {
            'name': 'Fishing Areas', 
            'description': 'Endpoint untuk manajemen wilayah penangkapan ikan (lokasi dan koordinat)'
        },
    ],
}

# Update the templates directory configuration to include our custom templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'fco_project' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Localization settings
USE_L10N = True